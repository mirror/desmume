/////////////////////////////////////////////////////////////////////////////
// Name:        wxdlg3dViewer.h.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     12/12/2009 15:45:31
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 12/12/2009 15:45:31

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "wx/imaglist.h"
////@end includes

#include "wxdlg3dViewer.h"

////@begin XPM images
////@end XPM images


/*
 * wxdlg3dViewer type definition
 */

IMPLEMENT_DYNAMIC_CLASS( wxdlg3dViewer, wxDialog )


/*
 * wxdlg3dViewer event table definition
 */

BEGIN_EVENT_TABLE( wxdlg3dViewer, wxDialog )

////@begin wxdlg3dViewer event table entries
    EVT_CLOSE( wxdlg3dViewer::OnCloseWindow )

    EVT_CHECKBOX( ID_MATERIALINTERPOLATE, wxdlg3dViewer::OnMaterialInterpolateClick )

////@end wxdlg3dViewer event table entries

END_EVENT_TABLE()


/*
 * wxdlg3dViewer constructors
 */

wxdlg3dViewer::wxdlg3dViewer()
{
    Init();
}

wxdlg3dViewer::wxdlg3dViewer( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * x creator
 */

bool wxdlg3dViewer::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin wxdlg3dViewer creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end wxdlg3dViewer creation
    return true;
}


/*
 * wxdlg3dViewer destructor
 */

wxdlg3dViewer::~wxdlg3dViewer()
{
////@begin wxdlg3dViewer destruction
////@end wxdlg3dViewer destruction
}


/*
 * Member initialisation
 */

void wxdlg3dViewer::Init()
{
////@begin wxdlg3dViewer member initialisation
    checkMaterialInterpolate = NULL;
    panelViewport = NULL;
////@end wxdlg3dViewer member initialisation
}


/*
 * Control creation for x
 */

void wxdlg3dViewer::CreateControls()
{    
////@begin wxdlg3dViewer content construction
    // Generated by DialogBlocks, 14/12/2009 00:57:31 (unregistered)

    wxdlg3dViewer* itemDialog1 = this;

    wxFlexGridSizer* itemFlexGridSizer2 = new wxFlexGridSizer(1, 0, 0, 0);
    itemFlexGridSizer2->AddGrowableCol(0);
    itemFlexGridSizer2->AddGrowableCol(1);
    itemFlexGridSizer2->AddGrowableCol(2);
    itemFlexGridSizer2->AddGrowableCol(3);
    itemFlexGridSizer2->AddGrowableCol(4);
    itemDialog1->SetSizer(itemFlexGridSizer2);

    wxStaticBox* itemStaticBoxSizer3Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Display options"));
    wxStaticBoxSizer* itemStaticBoxSizer3 = new wxStaticBoxSizer(itemStaticBoxSizer3Static, wxVERTICAL);
    itemFlexGridSizer2->Add(itemStaticBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    checkMaterialInterpolate = new wxCheckBox( itemDialog1, ID_MATERIALINTERPOLATE, _("Material clip interpolation"), wxDefaultPosition, wxDefaultSize, 0 );
    checkMaterialInterpolate->SetValue(false);
    itemStaticBoxSizer3->Add(checkMaterialInterpolate, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxCheckBox* itemCheckBox5 = new wxCheckBox( itemDialog1, ID_CHECKBOX1, _("Something else"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox5->SetValue(false);
    itemStaticBoxSizer3->Add(itemCheckBox5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    panelViewport = new wxPanel( itemDialog1, ID_PANEL, wxDefaultPosition, wxSize(512, 384), wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    itemFlexGridSizer2->Add(panelViewport, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer7Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Choose One"));
    wxStaticBoxSizer* itemStaticBoxSizer7 = new wxStaticBoxSizer(itemStaticBoxSizer7Static, wxVERTICAL);
    itemFlexGridSizer2->Add(itemStaticBoxSizer7, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_TOP|wxALL, 5);

    wxRadioButton* itemRadioButton8 = new wxRadioButton( itemDialog1, ID_RADIOBUTTON, _("Final Polylist"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton8->SetValue(true);
    itemStaticBoxSizer7->Add(itemRadioButton8, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxRadioButton* itemRadioButton9 = new wxRadioButton( itemDialog1, ID_RADIOBUTTON1, _("User Polylist"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton9->SetValue(false);
    itemRadioButton9->Enable(false);
    itemStaticBoxSizer7->Add(itemRadioButton9, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxRadioButton* itemRadioButton10 = new wxRadioButton( itemDialog1, ID_RADIOBUTTON2, _("Display List"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton10->SetValue(false);
    itemRadioButton10->Enable(false);
    itemStaticBoxSizer7->Add(itemRadioButton10, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticLine* itemStaticLine11 = new wxStaticLine( itemDialog1, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    itemFlexGridSizer2->Add(itemStaticLine11, 0, wxALIGN_CENTER_HORIZONTAL|wxGROW|wxALL, 5);

    wxListCtrl* itemListCtrl12 = new wxListCtrl( itemDialog1, ID_LISTCTRL, wxDefaultPosition, wxDefaultSize, wxLC_REPORT );
    itemFlexGridSizer2->Add(itemListCtrl12, 0, wxALIGN_CENTER_HORIZONTAL|wxGROW|wxALL, 5);

    wxTreeCtrl* itemTreeCtrl13 = new wxTreeCtrl( itemDialog1, ID_TREECTRL, wxDefaultPosition, wxSize(99, 99), wxTR_SINGLE );
    itemFlexGridSizer2->Add(itemTreeCtrl13, 0, wxALIGN_CENTER_HORIZONTAL|wxGROW|wxALL, 5);

    // Connect events and objects
    panelViewport->Connect(ID_PANEL, wxEVT_PAINT, wxPaintEventHandler(wxdlg3dViewer::OnPanelPaint), NULL, this);
    panelViewport->Connect(ID_PANEL, wxEVT_ERASE_BACKGROUND, wxEraseEventHandler(wxdlg3dViewer::OnPanelEraseBackground), NULL, this);
////@end wxdlg3dViewer content construction
}


/*
 * Should we show tooltips?
 */

bool wxdlg3dViewer::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap wxdlg3dViewer::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin wxdlg3dViewer bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end wxdlg3dViewer bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon wxdlg3dViewer::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin wxdlg3dViewer icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end wxdlg3dViewer icon retrieval
}


/*
 * wxEVT_CLOSE_WINDOW event handler for ID_X
 */

void wxdlg3dViewer::OnCloseWindow( wxCloseEvent& event )
{

    event.Skip();
}


/*
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_MATERIALINTERPOLATE
 */

void wxdlg3dViewer::OnMaterialInterpolateClick( wxCommandEvent& event )
{
	RepaintPanel();
}


/*
 * wxEVT_PAINT event handler for ID_PANEL
 */

void wxdlg3dViewer::OnPanelPaint( wxPaintEvent& event )
{
	_OnPaintPanel(event);
}




/*
 * wxEVT_ERASE_BACKGROUND event handler for ID_PANEL
 */

void wxdlg3dViewer::OnPanelEraseBackground( wxEraseEvent& event )
{
	//blank to block background clearing
}

